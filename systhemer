#! /usr/bin/env python3
"""Systhemer2.0 (Now in python!)"""
from logger import setup_logger
import interactive
import logging
import configparser
import Progs


class Settings:
    # default settings...
    colorlog_supported = True
    VDEBUG_LVL = 9
    # theme_file_path = './files/theme.toml'

def run():
    """run program"""
    # initialize
    # load ini file
    logger.info('Loading theme/config file at: \'%s\'...',
                Settings.theme_file_path)
    theme_p = configparser.ConfigParser()
    if not theme_p.read(Settings.theme_file_path):
        logger.critical('File %s not found!', Settings.theme_file_path)
        exit(1)
    theme = theme_p._sections

    logger.log(Settings.VDEBUG, 'Theme file data: %s', theme)
    # ini file loaded
    # initialized

    # Apply theme
    # loop though program definitions
    for prog_def in Progs.prog_defs:
        # apply theme to curent program
        logger.info('Applying theme for program: \'%s\'',
                    prog_def.name)

        # loop through rules
        for rule in theme:
            logger.debug('Applying rule: %s', rule)
            # loop through keys in current rule
            for key in theme[rule]:
                # set(key, value)
                prog_def.set(key, theme[rule][key], rule)

        # save theme for current program
        logger.info('Writing to config file for program: \'%s\'',
                    prog_def.name)
        prog_def.save()
    # theme applied


def parse_args():
    parser = argparse.ArgumentParser(description='Systhemer: System theming'
                                     'utility designed for ease of sharing')
    parser.add_argument('-i',
                        '--interactive',
                        help='run Systhemer in interactive mode',
                        action='store_true')
    parser.add_argument('-v',
                        '--verbose',
                        help='set level of verbosity',
                        action='count',
                        default=0)
    parser.add_argument('--VDEBUG_LVL',
                        help='set VDEBUG_LVL',
                        action='store')
    if Settings.colorlog_supported:
        parser.add_argument('-nc',
                            '--no-colorlog',
                            help='disable colorlog',
                            action='store_true')
    parser.add_argument('path',
                        help='path to theme file',
                        action='store')

    parser.parse_args(namespace=Settings)
    Settings.VDEBUG = Settings.VDEBUG_LVL
    # {nothing} : WARNING,
    # -v : INFO,
    # -vv : DEBUG,
    # -vvv : VDEBUG,
    # -v*{anything more} : VDEBUG
    levels = {1: logging.INFO, 2: logging.DEBUG, 3: Settings.VDEBUG_LVL}
    Settings.verbose = levels[Settings.verbose] \
        if Settings.verbose in levels else Settings.VDEBUG_LVL
    Settings.theme_file_path = Settings.path


if __name__ == '__main__':
    import argparse
    try:
        import colorlog
    except ImportError:
        Settings.colorlog_supported = False
        Settings.nocolorlog = True

    parse_args()
    logger = setup_logger(Settings)
    Progs.setup(Settings)
    if Settings.interactive:
        interactive.run(Settings)
    else:
        run()
