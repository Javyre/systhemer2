#! /usr/bin/env python3
"""Systhemer2.0 (Now in python!)"""
from logger import setup_logger
import interactive
import logging
import configparser
import Progs
from Progs.value import Litteral


class Settings:
    # default settings...
    # colorlog_supported = True
    VDEBUG_LVL = 9
    # theme_file_path = './files/theme.toml'


def run():
    """run program"""
    # initialize
    # load ini file
    logger.info('Loading theme/config file at: \'%s\'...',
                Settings.theme_file_path)
    theme_p = configparser.ConfigParser()
    if not theme_p.read(Settings.theme_file_path):
        logger.critical('File %s not found!', Settings.theme_file_path)
        exit(1)
    theme = theme_p._sections

    logger.log(Settings.VDEBUG, 'Theme file data: %s', theme)
    # ini file loaded
    # initialized

    # ==== Build values dict
    logger.info('Building values dictionary')
    values = {}

    for section_id, section in theme.items():
        # create empty sub-dicts
        values[section_id] = {}

        # loop through all key, val pairs for each section
        for key, val in section.items():

            val_type = None
            # val_type gets overriden in the order of prog_defs
            # loaded if there are many types defined
            for pd in Progs.installed_prog_defs:
                if pd.get_name() in Settings.excluded_progs:
                    continue

                val_type = pd.get_key_type(key)

            # val_type found...
            if val_type:
                values[section_id][key] = val_type.Formatter.auto_parse(val)
                logger.log(Settings.VDEBUG, 'recognized key \'%s\': %s',
                           key, values[section_id][key])

            # val_type not found...
            else:
                values[section_id][key] = Litteral(val)
                logger.log(Settings.VDEBUG, 'unrecognized key \'%s\' '
                           'assumed string litteral', key)

    logger.log(Settings.VDEBUG, values)
    # ==== value dict built

    # ==== Apply theme
    logger.info('Applying theme')
    # loop though program definitions
    for pd in Progs.installed_prog_defs:
        if pd.get_name() in Settings.excluded_progs:
            logger.info('Skipping blacklisted program: \'%s\'', pd.get_name())
            continue

        # apply theme to curent program
        logger.info('Applying theme for program: \'%s\'', pd.get_name())

        # loop through sections
        for section_id, section in values.items():
            logger.debug('Applying rule: %s', section_id)
            # loop through keys in current section
            for key, val in section.items():
                # set(key, value)
                pd.set(key, val, section_id)

        # save theme for current program
        logger.info('Starting save jobs for program: \'%s\'',
                    pd.get_name())
        pd.do_save()
    # ==== theme applied


def parse_args():
    args = {
        'interactive_mode': [
            'run Systhemer in interactive mode',
            ['-i', '--interactive'],
            {'action': 'store_true'}
        ],
        'verbosity': [
            'set level of verbosity',
            ['-v', '--verbose'],
            {'action':  'count',
             'default': 0}
        ],
        'list_progs': [
            'list supported programs',
            ['-l', '--list'],
            {'action': 'store_true'}
        ],
        'show_diff': [
            'generate diff before saving output file',
            ['-d', '--diff'],
            {'action': 'store_true'}
        ],
        'alt_diff': [
            'alternative diff format (use with --diff)',
            ['-D', '--alt-diff'],
            {'action': 'store_true'}
        ],
        'no_save': [
            "don't save file (useful for debugging and for use with --diff)",
            ['-n', '--no-save'],
            {'action': 'store_true'}
        ],
        'make_backup': [
            'save a backup (.bak) file',
            ['-b', '--mk-backup'],
            {'action': 'store_true'}
        ],
        'VDEBUG_LVL': [
            'set VDEBUG_LVL',
            ['--VDEBUG_LVL'],
            {'action': 'store'}
        ],
        'path': [
            'path to theme file',
            ['-f', '--file'],
            {'action': 'store'}
        ],
        'no_colorlog': [
            'disable colors',
            ['-nc', '--no-colors'],
            {'action': 'store_true'}
        ],
        'no_truncate_log': [
            'disable single-letter verbosity indicators',
            ['-nt', '--no-truncate-log'],
            {'action': 'store_true'}
        ],
        'excluded_progs': [
            'blacklist of excluded programs (comma separated)',
            ['-!', '--blacklist'],
            {'action': 'store'},
        ],
    }
    real_dests = {
        'path': 'theme_file_path',
        'VDEBUG_LVL': 'VDEBUG',
        # 'no_colorlog': 'nocolorlog'
    }
    conditions = {
        'no_colorlog': Settings.colorlog_supported
    }

    parser = argparse.ArgumentParser(description='Systhemer: System theming'
                                     'utility designed for ease of sharing')
    for arg_id, (_doc, _args, _kwargs) in args.items():
        if (arg_id not in conditions) or \
           (arg_id in conditions and conditions[arg_id]):
            # === pretty print for debugging...
            # toggle do_pp to toggle pprinting (since this is done before
            # setting up the logging system and before setting up argument
            # parsing...)
            do_pp = False
            if do_pp:
                ppa = ', '.join(['\'{}\''.format(a) for a in _args])
                ppas = ', '.join([
                    '{0}={1}{2}{1}'.format(a, "'" if type(v) is str else '', v)
                    for a, v in _kwargs.items()])
                print('parser.add_argument('
                      '{}, {}, dest={})'.format(ppa, ppas, arg_id))
            # === finish pretty print...

            parser.add_argument(*_args, **_kwargs, help=_doc, dest=arg_id)

    parser.parse_args(namespace=Settings)
    # Settings.VDEBUG = Settings.VDEBUG_LVL

    # === Verbosity ===
    # {nothing} : WARNING,
    # -v : INFO,
    # -vv : DEBUG,
    # -vvv : VDEBUG,
    # -v*{anything more} : VDEBUG
    levels = {1: logging.INFO, 2: logging.DEBUG, 3: Settings.VDEBUG_LVL}
    if Settings.verbosity in levels:
        Settings.verbosity = levels[Settings.verbosity]
    elif Settings.verbosity > 3:
        Settings.verbosity = Settings.VDEBUG_LVL
    else:
        Settings.verbosity = logging.WARNING

    # === Aliases for interal names ===
    for o, r in real_dests.items():
        ov = getattr(Settings, o, None)
        setattr(Settings, r, ov)
        if ov is not None:
            delattr(Settings, o)

    # === log LVL names ===
    if Settings.no_truncate_log:
        Settings.log_props = {
            'MAXLEN': 8,
            'log_names': {
                Settings.VDEBUG:  'VDEBUG',
                logging.DEBUG:    'DEBUG',
                logging.INFO:     'INFO',
                logging.WARNING:  'WARNING',
                logging.ERROR:    'ERROR',
                logging.CRITICAL: 'CRITICAL',
            }
        }
    else:
        Settings.log_props = {
            'MAXLEN': 2,
            'log_names': {
                Settings.VDEBUG:  'VD',
                logging.DEBUG:    'DE',
                logging.INFO:     'II',
                logging.WARNING:  'WW',
                logging.ERROR:    'EE',
                logging.CRITICAL: 'CR',
            }
        }

    # === Program blacklist ===
    blacklist = []
    if getattr(Settings, 'excluded_progs', None):
        blacklist = Settings.excluded_progs.split(',')
    Settings.excluded_progs = blacklist


def list_progs():
    [print(p.get_name()) for p in Progs.installed_prog_defs]


if __name__ == '__main__':
    import argparse

    # === Setup ===
    # check if colorlog is installed
    import importlib.util
    Settings.colorlog_supported = \
        importlib.util.find_spec("colorlog") is not None
    Settings.no_colorlog = not Settings.colorlog_supported

    # parse arguments
    parse_args()
    # setup logger
    logger = setup_logger(Settings)
    # setup progs
    Progs.setup(Settings)

    # === Check which mode to run ===
    # -- Interactive mode
    if Settings.interactive_mode:
        interactive.iconsole(Settings).cmdloop()

    # -- List progs and exit
    elif Settings.list_progs:
        list_progs()

    # -- Theme mode
    elif getattr(Settings, 'theme_file_path', None):
            # TODO: make it so that if the given filename/path isn't found,
            #       we look for it in the systhemer install dir or some
            #       other secondary dirs.
            run()
        # else:
        #     logger.critical('Error argument: \'path\' not specified!')
        #     exit(1)

    # -- Pipeline mode
    else:
        # Pipeline mode...
        # NOTE: implement pipeline injection support...
        # {insert beautiful code here}
        # we would wait for a EOF and /then/ close stdout and exit but... yeah
        exit()
