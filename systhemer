#! /usr/bin/env python3
"""Systhemer2.0 (Now in python!)"""
from logger import setup_logger
import interactive
import logging
import configparser
import Progs
from Progs.value import Litteral


class Settings:
    # default settings...
    # colorlog_supported = True
    VDEBUG_LVL = 9
    # theme_file_path = './files/theme.toml'


def run():
    """run program"""
    # initialize
    # load ini file
    logger.info('Loading theme/config file at: \'%s\'...',
                Settings.theme_file_path)
    theme_p = configparser.ConfigParser()
    if not theme_p.read(Settings.theme_file_path):
        logger.critical('File %s not found!', Settings.theme_file_path)
        exit(1)
    theme = theme_p._sections

    logger.log(Settings.VDEBUG, 'Theme file data: %s', theme)
    # ini file loaded
    # initialized

    # ==== Build values dict
    logger.info('Building values dictionary')
    values = {}

    for section_id, section in theme.items():
        # create empty sub-dicts
        values[section_id] = {}

        # loop through all key, val pairs for each section
        for key, val in section.items():

            val_type = None
            # val_type gets overriden in the order of prog_defs
            # loaded if there are many types defined
            for pd in Progs.prog_defs:
                val_type = pd.get_key_type(key)

            # val_type found...
            if val_type:
                values[section_id][key] = val_type.Formatter.auto_parse(val)
                logger.log(Settings.VDEBUG, 'recognized key \'%s\': %s',
                           key, values[section_id][key])

            # val_type not found...
            else:
                values[section_id][key] = Litteral(val)
                logger.log(Settings.VDEBUG, 'unrecognized key \'%s\' '
                           'assumed string litteral', key)

    logger.log(Settings.VDEBUG, values)
    # ==== value dict built

    # ==== Apply theme
    logger.info('Applying theme')
    # loop though program definitions
    for pd in Progs.prog_defs:
        # apply theme to curent program
        logger.info('Applying theme for program: \'%s\'',
                    pd.get_name())

        # loop through sections
        for section_id, section in values.items():
            logger.debug('Applying rule: %s', section_id)
            # loop through keys in current section
            for key, val in section.items():
                # set(key, value)
                pd.set(key, val, section_id)

        # save theme for current program
        logger.info('Writing to config file for program: \'%s\'',
                    pd.get_name())
        pd.save()
    # ==== theme applied


def parse_args():
    parser = argparse.ArgumentParser(description='Systhemer: System theming'
                                     'utility designed for ease of sharing')
    parser.add_argument('-i',
                        '--interactive',
                        help='run Systhemer in interactive mode',
                        action='store_true')
    parser.add_argument('-v',
                        '--verbose',
                        help='set level of verbosity',
                        action='count',
                        default=0)
    parser.add_argument('-l',
                        '--list',
                        help='list supported programs',
                        action='store_true',)
    parser.add_argument('--VDEBUG_LVL',
                        help='set VDEBUG_LVL',
                        action='store')
    if Settings.colorlog_supported:
        parser.add_argument('-nc',
                            '--no-colorlog',
                            help='disable colorlog',
                            action='store_true')
    parser.add_argument('path',
                        help='path to theme file',
                        action='store',
                        nargs='?')

    parser.parse_args(namespace=Settings)
    Settings.VDEBUG = Settings.VDEBUG_LVL
    # {nothing} : WARNING,
    # -v : INFO,
    # -vv : DEBUG,
    # -vvv : VDEBUG,
    # -v*{anything more} : VDEBUG
    levels = {1: logging.INFO, 2: logging.DEBUG, 3: Settings.VDEBUG_LVL}
    if Settings.verbose in levels:
        Settings.verbose = levels[Settings.verbose]
    elif Settings.verbose > 3:
        Settings.verbose = Settings.VDEBUG_LVL
    else:
        Settings.verbose = logging.WARNING
    Settings.theme_file_path = Settings.path


def list_progs():

    for p in Progs.prog_defs:
        if p.is_installed():
            print(p.get_name())


if __name__ == '__main__':
    import argparse
    try:
        import colorlog
    except ImportError:
        Settings.colorlog_supported = False
        Settings.nocolorlog = True
    else:
        Settings.colorlog_supported = True
        Settings.nocolorlog = False

    parse_args()
    logger = setup_logger(Settings)
    Progs.setup(Settings)
    if Settings.interactive:
        interactive.iconsole(Settings).cmdloop()
    elif Settings.list:
        list_progs()
    else:
        if getattr(Settings, 'path', None):
            run()
        else:
            logger.critical('Error argument: \'path\' not specified!')
            exit(1)
